{"version":3,"sources":["data/Food.js","contexts/MealsContext.js","contexts/ChartContext.js","components/Inputbar/Inputbar.js","components/TodayMeal/TodayMeal.js","components/DailyBlanace/DailyBalance.js","components/Meal/Meal.js","components/Charts/Chart.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Food","id","uuid","value","label","kcal","portion","MealsContext","createContext","MealsContextProvider","props","useState","meals","setMeals","todayMeals","setTodayMeals","caloriesCount","setCaloriesCount","savedMeals","setSavedMeals","changePortion","a","sum","Math","floor","map","item","newKcal","useEffect","getLsMeals","JSON","parse","localStorage","getItem","length","reduce","b","combineMeals","serializedState","stringify","setItem","err","console","log","Provider","addTodayMeal","newMeal","today","moment","format","date","removeMeal","index","todayMealsNew","splice","children","ChartContext","ChartContextProvider","data","setData","labels","setLabels","neededValues","result","Object","values","val","assign","Inputbar","useContext","styles","control","provided","state","background","border","boxSizing","borderRadius","width","height","padding","boxShadow","cursor","menu","zIndex","singleValue","color","className","options","selectedOption","onChange","placeholder","isSearchable","theme","colors","primary25","primary","TodayMeal","removeMealHandler","changePortionHandler","e","target","getAttribute","iconRandom","faPizzaSlice","faHamburger","faEgg","faBreadSlice","faHotdog","faBacon","faDrumstickBite","displayMeals","energyValue","key","type","min","max","defaultValue","name","onClick","icon","random","size","DailyBalance","Meal","Chart","chartOptions","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","maintainAspectRatio","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Navbar","navLink","useLocation","pathname","to","faChartLine","faUtensils","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fbd4158.chunk.js","sourcesContent":["import uuid from 'uuid';\n\nconst Food = [\n\n    { id: uuid(), value: 'rice', label: 'Rice', kcal: 351, portion: 100 },\n    { id: uuid(), value: 'chicken breast', label: 'Chicken breast', kcal: 164, portion: 100 },\n    { id: uuid(), value: 'beef', label: 'Beef', kcal: 250, portion: 100 },\n    { id: uuid(), value: 'millet', label: 'Millet', kcal: 378, portion: 100 },\n    { id: uuid(), value: 'potatos', label: 'Potatos', kcal: 77, portion: 100 },\n    { id: uuid(), value: 'cottage cheese', label: 'Cottage Cheese', kcal: 98, portion: 100 },\n    { id: uuid(), value: 'donut', label: 'Donut', kcal: 452, portion: 100 },\n    { id: uuid(), value: 'pasta', label: 'Pasta', kcal: 131, portion: 100 },\n    { id: uuid(), value: 'bread roll', label: 'Bread Roll', kcal: 310, portion: 100 },\n    { id: uuid(), value: 'curly', label: 'Curly', kcal: 500, portion: 100 }\n\n]\n\nexport default Food","import React, { createContext, useState, useEffect } from 'react';\nimport moment from 'moment';\nimport Food from '../data/Food';\n\nexport const MealsContext = createContext();\n\nconst MealsContextProvider = props => {\n    const [meals, setMeals] = useState(Food);\n\n    const [todayMeals, setTodayMeals] = useState([]);\n\n    const [caloriesCount, setCaloriesCount] = useState([0]);\n\n    const [savedMeals, setSavedMeals] = useState([]);\n\n    const addTodayMeal = (newMeal) => {\n\n        let today = moment();\n        today = today.format('DD-MM-YYYY');\n\n        setTodayMeals([...todayMeals, { ...newMeal, date: today }])\n    };\n\n    const removeMeal = (index) => {\n        let todayMealsNew = todayMeals\n        todayMealsNew.splice(index, 1)\n        setTodayMeals([...todayMealsNew])\n    };\n\n    const changePortion = async (portion, kcal, id) => {\n\n        const sum = Math.floor((kcal * portion) / 100)\n        setTodayMeals(todayMeals.map(item => item.id === id ? { ...item, newKcal: sum } : item))\n\n    };\n\n    useEffect(() => {\n\n        const getLsMeals = JSON.parse(localStorage.getItem('meals'));\n        setSavedMeals(getLsMeals);\n\n    }, [meals]);\n\n    useEffect(() => {\n\n        if (todayMeals.length > 0) {\n            const sum = todayMeals.map(item => item.newKcal ? item.newKcal : item.kcal).reduce((a, b) => { return a + b })\n            setCaloriesCount(Math.floor(sum))\n        } else {\n            setCaloriesCount(0)\n        }\n\n        //save data to LS\n\n        try {\n\n            const combineMeals = [...savedMeals, ...todayMeals]\n            const serializedState = JSON.stringify(combineMeals);\n            localStorage.setItem('meals', serializedState);\n\n        }\n        catch (err) {\n            return console.log(err);\n        }\n\n    }, [todayMeals, savedMeals]);\n\n    return (\n        <MealsContext.Provider value={{ meals, setMeals, todayMeals, addTodayMeal, removeMeal, changePortion, caloriesCount, savedMeals }}>\n            {props.children}\n        </MealsContext.Provider>\n    )\n}\n\nexport default MealsContextProvider","import React, { createContext, useState, useEffect } from 'react';\n\nexport const ChartContext = createContext();\n\nconst ChartContextProvider = props => {\n\n    const [data, setData] = useState();\n    const [labels, setLabels] = useState();\n\n    useEffect(() => {\n\n        //load data from LS\n\n        const loadDataFromLs = JSON.parse(localStorage.getItem('meals'));\n        const neededValues = loadDataFromLs.map(({ date, kcal }) => ({ date, kcal }));\n\n        const result = Object.values(neededValues.reduce((val, { kcal, date }) => {\n            if (!val[date])\n                val[date] = Object.assign({}, { kcal, date });\n            else\n                val[date].kcal += kcal;\n            return val;\n        }, {}));\n\n        // destructuring for two separate arrays\n        const data = result.map(({ kcal }) => kcal);\n        const labels = result.map(({ date }) => date);\n\n        setData(data);\n        setLabels(labels)\n\n    }, []);\n\n    return (\n        <ChartContext.Provider value={{ data, labels }}>\n            {props.children}\n        </ChartContext.Provider>\n    )\n}\n\nexport default ChartContextProvider","import React, { useContext } from 'react';\nimport { MealsContext } from '../../contexts/MealsContext';\nimport Select from 'react-select';\nimport './Inputbar.scss';\n\nconst Inputbar = () => {\n\n    const { meals, addTodayMeal } = useContext(MealsContext);\n\n    const styles = {\n        control: (provided, state) => ({\n            ...provided,\n            background: '#000',\n            border: '1px solid rgba(254, 145, 102, 0.25)',\n            boxSizing: 'border-box',\n            borderRadius: '20px',\n            width: '100%',\n            height: '32px',\n            padding: '0 15px',\n            boxShadow: '0 0 18px #FE9166',\n            cursor: 'pointer'\n        }),\n        menu: (provided) => ({\n            ...provided,\n            width: '100%',\n            zIndex: '110',\n            background: '#000'\n        }),\n        singleValue: (provided) => ({\n            ...provided,\n            color: '#fff'\n        })\n    }\n\n    let selectedOption\n\n    const selectedMeal = selectedOption => {\n        addTodayMeal(selectedOption)\n    };\n\n    return (\n        <div className=\"inputbar__container\">\n            <Select\n                options={meals}\n                value={selectedOption}\n                onChange={selectedMeal}\n                placeholder={'Type your meal'}\n                isSearchable={true}\n                styles={styles}\n                theme={theme => ({\n                    ...theme,\n                    borderRadius: 0,\n                    colors: {\n                        ...theme.colors,\n                        primary25: '#FE9166',\n                        primary: '#FE9166',\n                    },\n                })}\n            />\n        </div>\n    )\n};\n\nexport default Inputbar;","import React, { useContext } from 'react';\nimport { MealsContext } from '../../contexts/MealsContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPizzaSlice, faHamburger, faEgg, faBreadSlice, faHotdog, faBacon, faDrumstickBite } from '@fortawesome/free-solid-svg-icons';\nimport './TodayMeal.scss';\n\nconst TodayMeal = () => {\n\n    const { todayMeals, removeMeal, changePortion } = useContext(MealsContext);\n\n    const removeMealHandler = (id) => {\n        removeMeal(id);\n    };\n\n    const changePortionHandler = (e) => {\n\n        const portion = e.target.value\n        const kcal = e.target.getAttribute('kcal')\n        const id = e.target.id\n\n        changePortion(portion, kcal, id);\n    };\n\n    const iconRandom = [faPizzaSlice, faHamburger, faEgg, faBreadSlice, faHotdog, faBacon, faDrumstickBite];\n\n    const displayMeals = todayMeals.length > 0\n\n        ? todayMeals.map((item, index) => { //todo: change key, dont use index\n\n            const energyValue = item.newKcal ? item.newKcal : item.kcal\n\n            return (\n                <div className=\"today-meal__meal\" key={index}>\n                    <h1 className=\"today-meal__title\">{item.label}</h1>\n                    <form className=\"today-meal__specifications\">\n                        <span><input className=\"today-meal__input\" type=\"number\" min=\"1\" max=\"9999\" defaultValue={item.portion} name=\"portion\" kcal={item.kcal} id={item.id} onChange={changePortionHandler} /> g</span>\n                        <span className=\"today-meal__value\"><strong>{energyValue}</strong> kcal</span>\n                        <div className=\"today-meal__delete\" onClick={removeMealHandler}></div>\n                    </form>\n                </div>\n            )\n        })\n\n        : <p className=\"today-meal__placeholder\">Choose some eated <FontAwesomeIcon icon={iconRandom[Math.floor(Math.random() * iconRandom.length)]} size=\"2x\" /></p>;\n\n\n\n    return (\n        <div className=\"today-meal__container\">\n            {displayMeals}\n        </div>\n    )\n}\n\nexport default TodayMeal;","import React, { useContext } from 'react';\nimport { MealsContext } from '../../contexts/MealsContext';\nimport './DailyBalance.scss';\n\nconst DailyBalance = () => {\n    const { caloriesCount } = useContext(MealsContext);\n\n    return (\n        <div className=\"daily-balance__container\">\n            <p>Today you eated: <strong className=\"daily-balance__score\">{caloriesCount}</strong> kalories</p>\n        </div>\n    )\n}\n\nexport default DailyBalance;","import React, { Fragment } from 'react';\nimport Inputbar from '../Inputbar/Inputbar';\nimport TodayMeal from '../TodayMeal/TodayMeal';\nimport DailyBalance from '../DailyBlanace/DailyBalance';\n\nconst Meal = () => {\n\n    return (\n        <Fragment>\n            <Inputbar />\n            <TodayMeal />\n            <DailyBalance />\n        </Fragment>\n    )\n\n};\n\nexport default Meal;","import React, { useContext } from 'react';\nimport { ChartContext } from '../../contexts/ChartContext';\nimport { Line } from 'react-chartjs-2';\nimport './Chart.scss';\n\nconst Chart = () => {\n\n    const { data, labels } = useContext(ChartContext);\n\n    const chartOptions = {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Kalories eated',\n            fill: true,\n            lineTension: 0.8,\n            backgroundColor: 'rgba(25, 159, 132, 0.2)',\n            borderColor: 'rgb(25, 159, 132)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: 'rgb(25, 159, 132)',\n            maintainAspectRatio: false,\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: data\n          }\n        ]\n      };\n      \n\n    return (\n        <div className=\"chart__container\">\n            <Line data={chartOptions}></Line>\n        </div>\n    )\n\n};\n\nexport default Chart;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChartLine, faUtensils } from '@fortawesome/free-solid-svg-icons';\nimport './Navbar.scss';\n\nconst Navbar = () => {\n\n    const location = useLocation();\n\n    let navLink\n\n    location.pathname === '/'\n        ? navLink = <Link to=\"/chart\"><FontAwesomeIcon className=\"Navbar__icon\" icon={faChartLine} size=\"2x\" /></Link>\n        : navLink = <Link to=\"/\"><FontAwesomeIcon className=\"Navbar__icon\" icon={faUtensils} size=\"2x\" /></Link>\n\n    return (\n        <nav className=\"Navbar__container\">\n            {navLink}\n        </nav>\n    )\n\n};\n\nexport default Navbar","import React from 'react';\nimport MealsContextProvider from './contexts/MealsContext';\nimport ChartContextProvider from './contexts/ChartContext';\nimport './App.scss';\nimport { Route } from 'react-router';\nimport Meal from './components/Meal/Meal';\nimport Chart from './components/Charts/Chart';\nimport Navbar from './components/Navbar/Navbar';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MealsContextProvider>\n                <Navbar />\n                <Route exact path=\"/\" component={Meal} />\n                <ChartContextProvider>\n                    <Route path=\"/chart\" component={Chart} />\n                </ChartContextProvider>\n            </MealsContextProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}